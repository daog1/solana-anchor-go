package main

import (
	"fmt"
	"os"
	"path"
	"strconv"
	"strings"

	"github.com/daog1/solana-anchor-go/sighash"
	. "github.com/dave/jennifer/jen"
	"github.com/gagliardetto/solana-go"
	. "github.com/gagliardetto/utilz"
)

func ToPackageName(s string) string {
	return sighash.ToRustSnakeCase(ToCamel(s))
}
func NewGoFile(programName string, includeBoilerplace bool) *File {
	file := NewFile(ToPackageName(programName))
	// Set a prefix to avoid collision between variable names and packages:
	file.PackagePrefix = "ag"
	// Add comment to file:
	// file.HeaderComment("Code generated by https://github.com/gagliardetto. DO NOT EDIT.")

	if includeBoilerplace {
		{
			// main function:
			// file.Func().Id("main").Params().Block()
		}
	}
	return file
}

// SaveGoFile encodes to a file the provided *jen.File.
func SaveGoFile(outDir string, assetFileName string, file *File) error {
	// Save Go assets:
	assetFilepath := path.Join(outDir, assetFileName)

	// Create file Golang file:
	goFile, err := os.Create(assetFilepath)
	if err != nil {
		panic(err)
	}
	defer goFile.Close()

	// Write generated Golang to file:
	Infof("Saving Golang assets to %q", MustAbs(assetFilepath))
	return file.Render(goFile)
}

func DoGroup(f func(*Group)) *Statement {
	g := &Group{}
	g.CustomFunc(Options{
		Multi: false,
	}, f)
	s := newStatement()
	*s = append(*s, g)
	return s
}

func DoGroupMultiline(f func(*Group)) *Statement {
	g := &Group{}
	g.CustomFunc(Options{
		Multi: true,
	}, f)
	s := newStatement()
	*s = append(*s, g)
	return s
}
func newStatement() *Statement {
	return &Statement{}
}

var sysVars = map[string]solana.PublicKey{
	"SysVarClockPubkey":             solana.SysVarClockPubkey,
	"SysVarEpochSchedulePubkey":     solana.SysVarEpochSchedulePubkey,
	"SysVarFeesPubkey":              solana.SysVarFeesPubkey,
	"SysVarInstructionsPubkey":      solana.SysVarInstructionsPubkey,
	"SysVarRecentBlockHashesPubkey": solana.SysVarRecentBlockHashesPubkey,
	"SysVarRentPubkey":              solana.SysVarRentPubkey,
	"SysVarSlotHashesPubkey":        solana.SysVarSlotHashesPubkey,
	"SysVarSlotHistoryPubkey":       solana.SysVarSlotHistoryPubkey,
	"SysVarStakeHistoryPubkey":      solana.SysVarStakeHistoryPubkey,
	"SysVarRewardsPubkey":           solana.SysVarRewardsPubkey,
}

func isVar(name string) bool {
	return strings.HasPrefix(name, "$(") && strings.HasSuffix(name, ")")
}

func getSysVarName(variable string) string {
	variable = strings.TrimPrefix(variable, "$(")
	variable = strings.TrimSuffix(variable, ")")
	return variable
}

func isSysVar(name string) bool {
	_, ok := sysVars[name]
	return ok
}

func StringIf(condition bool, s string) string {
	if condition {
		return s
	}
	return ""
}

func CodeIf(condition bool, code Code) Code {
	if condition {
		return code
	}
	return Null()
}
func BytesStringToString(input string) (string, error) {
	// 去除方括号
	cleaned := strings.Trim(input, "[]")
	if cleaned == "" {
		return "", fmt.Errorf("输入为空或格式错误")
	}

	// 按逗号和空格分割
	numStrs := strings.Split(cleaned, ", ")
	if len(numStrs) == 0 {
		return "", fmt.Errorf("无法解析字节数组")
	}

	// 转换为字节切片
	var bytes []byte
	for _, numStr := range numStrs {
		num, err := strconv.Atoi(numStr) // 将字符串转为整数
		if err != nil {
			return "", fmt.Errorf("转换错误: %v", err)
		}
		if num < 0 || num > 255 { // 检查是否在 byte 范围内
			return "", fmt.Errorf("字节值 %d 超出范围 (0-255)", num)
		}
		bytes = append(bytes, byte(num)) // 转为 byte 并追加
	}

	// 将字节切片转为字符串
	return string(bytes), nil
}
